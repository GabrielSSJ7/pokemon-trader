exit
@user
exit
pokemon[:owner]
pokemon[:user]
pokemon.user
pokemon
    pokemon = Pokemon.collection.aggregate([
      { "$match" => { "poke_id" => id } },
      {'$lookup' => {
        from: 'user',
        localField: 'user_id',
        foreignField: '_id',
        as: 'owner'
        }},
      {'$project' => {
        _id: 1,
        name: 1,
        base_xp: 1,
        price: 1,
        owner: { owner: '$first'},
        poke_id: 1,
        user_id: 1,
        picture: 1
      }}
    ]).first
exit
id
Pokemon.collection.aggregate([      { "$match" => { "poke_id" => id } },
      {'$lookup' => {
        from: 'user',
        localField: 'user_id',
        foreignField: '_id',
        as: 'owner'
        }},
      {'$project' => {
        _id: 1,
        name: 1,
        base_xp: 1,
        price: 1,
        owner: { owner: '$first'},
        poke_id: 1,
        user_id: 1,
        picture: 1
      }}
    ])
Pokemon.collection.aggregate([      { "$match" => { "poke_id" => id } },
      {'$lookup' => {
        from: 'user',
        localField: 'user_id',
        foreignField: '_id',
        as: 'owner'
        }},
      {'$project' => {
        _id: 1,
        name: 1,
        base_xp: 1,
        price: 1,
        owner: { owner: '$first'},
        poke_id: 1,
        user_id: 1,
        picture: 1
      }}
    ]).to_a
Pokemon.collection.aggregate([      { "$match" => { "poke_id" => id } },
      {'$lookup' => {
        from: 'user',
        localField: 'user_id',
        foreignField: '_id',
        as: 'owner'
        }},
      {'$project' => {
        _id: 1,
        name: 1,
        base_xp: 1,
        price: 1,
        owner: { owner: '$first'},
        poke_id: 1,
        user_id: 1,
        picture: 1
      }}
    ])
Pokemon.collection.aggregate([      { "$match" => { "poke_id" => id } },
      {'$lookup' => {
        from: 'user',
        localField: 'user_id',
        foreignField: '_id',
        as: 'owner'
        }},
      {'$project' => {
        _id: 1,
        name: 1,
        base_xp: 1,
        price: 1,
        owner: { owner: '$first'},
        poke_id: 1,
        user_id: 1,
        picture: 1
      }}
    ]).first
Pokemon.collection.aggregate([
pokemon
exit
pokemon
exit
pokemon[:user_id] == @user[:_id]
@user[:_id]
@user
pokemon[:user_id]
pokemon
pp_pokemon
pppokemon
pp pokemon
pokemon
b = (pokemon[:base_experience] * ENV["POKEMON_BASE_BTC"].to_f)
pokemon[:base_experience]
b = pokemon[:base_experience] * ENV["POKEMON_BASE_BTC"].to_f
ENV["POKEMON_BASE_BTC"].to_i
ENV["POKEMON_BASE_BTC"].to_d
ENV["POKEMON_BASE_BTC"].to_f
ENV["POKEMON_BASE_BTC"]
pokemon[:base_experience]
pokemon_price(pokemon[:base_experience])
exit
ENV["POKEMON_BASE_PRICE"]
exit
pokemon[:base_experience]
pokemon
exit
base_xp
exit
@current_user
continue
decode(header)
header
exit
uri.query
uri
continue
url
uri.query
uri.params
uri.port
uri.host
url
uri.query
uri
continue
params[:url]
url
continue
offset
limit
continue
offset
limit
exit
limit
offset
exit
params
exit
response.request
request.to_s
request.to_h
request
request.headers
request.header
request
response.each_header.to_h
response.each_header
response.
response.headers
response.header.to_s
response.header
response.headers
response.code
response
response.to_s
response.to_param
response
response[:status]
response.status
JSON.parse(response.body)
response.body
response
exit
url
response
exit
url
response
exit
response.status
response[:status]
response
